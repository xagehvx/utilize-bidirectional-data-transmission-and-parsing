
lab6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005bc  080005c4  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080005c4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000001c  080005c4  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000105c4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002bf7  00000000  00000000  000105ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000007e1  00000000  00000000  000131e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000110  00000000  00000000  000139c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00013ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000f50  00000000  00000000  00013ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000ac2  00000000  00000000  00014af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  000155b2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000270  00000000  00000000  00015630  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080005a4 	.word	0x080005a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080005a4 	.word	0x080005a4

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <I2C1_IRQHandler>:
 */

#include "I2C.h"


void I2C1_IRQHandler(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

}
 8000218:	46c0      	nop			; (mov r8, r8)
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <init_I2C>:


void init_I2C(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	//Enable GPIOB
	RCC->IOPENR |= (1U << 1);
 8000224:	4b3d      	ldr	r3, [pc, #244]	; (800031c <init_I2C+0xfc>)
 8000226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000228:	4b3c      	ldr	r3, [pc, #240]	; (800031c <init_I2C+0xfc>)
 800022a:	2102      	movs	r1, #2
 800022c:	430a      	orrs	r2, r1
 800022e:	635a      	str	r2, [r3, #52]	; 0x34

	//setup PB8 as AF6
	GPIOB->MODER &= ~(3U << 2*8);
 8000230:	4b3b      	ldr	r3, [pc, #236]	; (8000320 <init_I2C+0x100>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b3a      	ldr	r3, [pc, #232]	; (8000320 <init_I2C+0x100>)
 8000236:	493b      	ldr	r1, [pc, #236]	; (8000324 <init_I2C+0x104>)
 8000238:	400a      	ands	r2, r1
 800023a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2 << 2*8);
 800023c:	4b38      	ldr	r3, [pc, #224]	; (8000320 <init_I2C+0x100>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b37      	ldr	r3, [pc, #220]	; (8000320 <init_I2C+0x100>)
 8000242:	2180      	movs	r1, #128	; 0x80
 8000244:	0289      	lsls	r1, r1, #10
 8000246:	430a      	orrs	r2, r1
 8000248:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER |= (1U << 8);
 800024a:	4b35      	ldr	r3, [pc, #212]	; (8000320 <init_I2C+0x100>)
 800024c:	685a      	ldr	r2, [r3, #4]
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <init_I2C+0x100>)
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	0049      	lsls	r1, r1, #1
 8000254:	430a      	orrs	r2, r1
 8000256:	605a      	str	r2, [r3, #4]

	//choose AF from mux
	GPIOB->AFR[1] &=  ~(0xFU << 4*0);
 8000258:	4b31      	ldr	r3, [pc, #196]	; (8000320 <init_I2C+0x100>)
 800025a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800025c:	4b30      	ldr	r3, [pc, #192]	; (8000320 <init_I2C+0x100>)
 800025e:	210f      	movs	r1, #15
 8000260:	438a      	bics	r2, r1
 8000262:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |=  (6 << 4*0);
 8000264:	4b2e      	ldr	r3, [pc, #184]	; (8000320 <init_I2C+0x100>)
 8000266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000268:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <init_I2C+0x100>)
 800026a:	2106      	movs	r1, #6
 800026c:	430a      	orrs	r2, r1
 800026e:	625a      	str	r2, [r3, #36]	; 0x24

	//setup PB9 as AF6
	GPIOB->MODER &= ~(3U << 2*9);
 8000270:	4b2b      	ldr	r3, [pc, #172]	; (8000320 <init_I2C+0x100>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <init_I2C+0x100>)
 8000276:	492c      	ldr	r1, [pc, #176]	; (8000328 <init_I2C+0x108>)
 8000278:	400a      	ands	r2, r1
 800027a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2 << 2*9);
 800027c:	4b28      	ldr	r3, [pc, #160]	; (8000320 <init_I2C+0x100>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b27      	ldr	r3, [pc, #156]	; (8000320 <init_I2C+0x100>)
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	0309      	lsls	r1, r1, #12
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER |= (1U << 9);
 800028a:	4b25      	ldr	r3, [pc, #148]	; (8000320 <init_I2C+0x100>)
 800028c:	685a      	ldr	r2, [r3, #4]
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <init_I2C+0x100>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	0089      	lsls	r1, r1, #2
 8000294:	430a      	orrs	r2, r1
 8000296:	605a      	str	r2, [r3, #4]

	//choose AF from mux
	GPIOB->AFR[1] &=  ~(0xFU << 4*1);
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <init_I2C+0x100>)
 800029a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800029c:	4b20      	ldr	r3, [pc, #128]	; (8000320 <init_I2C+0x100>)
 800029e:	21f0      	movs	r1, #240	; 0xf0
 80002a0:	438a      	bics	r2, r1
 80002a2:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |=  (6 << 4*1);
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <init_I2C+0x100>)
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <init_I2C+0x100>)
 80002aa:	2160      	movs	r1, #96	; 0x60
 80002ac:	430a      	orrs	r2, r1
 80002ae:	625a      	str	r2, [r3, #36]	; 0x24

	//enable I2C1
	RCC->APBENR1 |= (1U << 21);
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <init_I2C+0xfc>)
 80002b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80002b4:	4b19      	ldr	r3, [pc, #100]	; (800031c <init_I2C+0xfc>)
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	0389      	lsls	r1, r1, #14
 80002ba:	430a      	orrs	r2, r1
 80002bc:	63da      	str	r2, [r3, #60]	; 0x3c

	I2C1->TIMINGR |= (3 << 28); //PRESC
 80002be:	4b1b      	ldr	r3, [pc, #108]	; (800032c <init_I2C+0x10c>)
 80002c0:	691a      	ldr	r2, [r3, #16]
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <init_I2C+0x10c>)
 80002c4:	21c0      	movs	r1, #192	; 0xc0
 80002c6:	0589      	lsls	r1, r1, #22
 80002c8:	430a      	orrs	r2, r1
 80002ca:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x13 << 0); //SCLL
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <init_I2C+0x10c>)
 80002ce:	691a      	ldr	r2, [r3, #16]
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <init_I2C+0x10c>)
 80002d2:	2113      	movs	r1, #19
 80002d4:	430a      	orrs	r2, r1
 80002d6:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0xF << 8); //SCLH
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <init_I2C+0x10c>)
 80002da:	691a      	ldr	r2, [r3, #16]
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <init_I2C+0x10c>)
 80002de:	21f0      	movs	r1, #240	; 0xf0
 80002e0:	0109      	lsls	r1, r1, #4
 80002e2:	430a      	orrs	r2, r1
 80002e4:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x2 << 16); //SDADEL
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <init_I2C+0x10c>)
 80002e8:	691a      	ldr	r2, [r3, #16]
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <init_I2C+0x10c>)
 80002ec:	2180      	movs	r1, #128	; 0x80
 80002ee:	0289      	lsls	r1, r1, #10
 80002f0:	430a      	orrs	r2, r1
 80002f2:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x4 << 20); //SCLDEL
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <init_I2C+0x10c>)
 80002f6:	691a      	ldr	r2, [r3, #16]
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <init_I2C+0x10c>)
 80002fa:	2180      	movs	r1, #128	; 0x80
 80002fc:	03c9      	lsls	r1, r1, #15
 80002fe:	430a      	orrs	r2, r1
 8000300:	611a      	str	r2, [r3, #16]

	I2C1->CR1 = (1U << 0); //PE
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <init_I2C+0x10c>)
 8000304:	2201      	movs	r2, #1
 8000306:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(I2C1_IRQn, 1);
 8000308:	2101      	movs	r1, #1
 800030a:	2017      	movs	r0, #23
 800030c:	f7ff ff14 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_IRQn);
 8000310:	2017      	movs	r0, #23
 8000312:	f7ff fef7 	bl	8000104 <__NVIC_EnableIRQ>
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40021000 	.word	0x40021000
 8000320:	50000400 	.word	0x50000400
 8000324:	fffcffff 	.word	0xfffcffff
 8000328:	fff3ffff 	.word	0xfff3ffff
 800032c:	40005400 	.word	0x40005400

08000330 <__NVIC_EnableIRQ>:
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	0002      	movs	r2, r0
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b7f      	cmp	r3, #127	; 0x7f
 8000342:	d809      	bhi.n	8000358 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000344:	1dfb      	adds	r3, r7, #7
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	001a      	movs	r2, r3
 800034a:	231f      	movs	r3, #31
 800034c:	401a      	ands	r2, r3
 800034e:	4b04      	ldr	r3, [pc, #16]	; (8000360 <__NVIC_EnableIRQ+0x30>)
 8000350:	2101      	movs	r1, #1
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	601a      	str	r2, [r3, #0]
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b002      	add	sp, #8
 800035e:	bd80      	pop	{r7, pc}
 8000360:	e000e100 	.word	0xe000e100

08000364 <__NVIC_SetPriority>:
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	0002      	movs	r2, r0
 800036c:	6039      	str	r1, [r7, #0]
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b7f      	cmp	r3, #127	; 0x7f
 8000378:	d828      	bhi.n	80003cc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800037a:	4a2f      	ldr	r2, [pc, #188]	; (8000438 <__NVIC_SetPriority+0xd4>)
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	b25b      	sxtb	r3, r3
 8000382:	089b      	lsrs	r3, r3, #2
 8000384:	33c0      	adds	r3, #192	; 0xc0
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	589b      	ldr	r3, [r3, r2]
 800038a:	1dfa      	adds	r2, r7, #7
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	0011      	movs	r1, r2
 8000390:	2203      	movs	r2, #3
 8000392:	400a      	ands	r2, r1
 8000394:	00d2      	lsls	r2, r2, #3
 8000396:	21ff      	movs	r1, #255	; 0xff
 8000398:	4091      	lsls	r1, r2
 800039a:	000a      	movs	r2, r1
 800039c:	43d2      	mvns	r2, r2
 800039e:	401a      	ands	r2, r3
 80003a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	019b      	lsls	r3, r3, #6
 80003a6:	22ff      	movs	r2, #255	; 0xff
 80003a8:	401a      	ands	r2, r3
 80003aa:	1dfb      	adds	r3, r7, #7
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	0018      	movs	r0, r3
 80003b0:	2303      	movs	r3, #3
 80003b2:	4003      	ands	r3, r0
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003b8:	481f      	ldr	r0, [pc, #124]	; (8000438 <__NVIC_SetPriority+0xd4>)
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	430a      	orrs	r2, r1
 80003c4:	33c0      	adds	r3, #192	; 0xc0
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	501a      	str	r2, [r3, r0]
}
 80003ca:	e031      	b.n	8000430 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <__NVIC_SetPriority+0xd8>)
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	0019      	movs	r1, r3
 80003d4:	230f      	movs	r3, #15
 80003d6:	400b      	ands	r3, r1
 80003d8:	3b08      	subs	r3, #8
 80003da:	089b      	lsrs	r3, r3, #2
 80003dc:	3306      	adds	r3, #6
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	18d3      	adds	r3, r2, r3
 80003e2:	3304      	adds	r3, #4
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	1dfa      	adds	r2, r7, #7
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	0011      	movs	r1, r2
 80003ec:	2203      	movs	r2, #3
 80003ee:	400a      	ands	r2, r1
 80003f0:	00d2      	lsls	r2, r2, #3
 80003f2:	21ff      	movs	r1, #255	; 0xff
 80003f4:	4091      	lsls	r1, r2
 80003f6:	000a      	movs	r2, r1
 80003f8:	43d2      	mvns	r2, r2
 80003fa:	401a      	ands	r2, r3
 80003fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	019b      	lsls	r3, r3, #6
 8000402:	22ff      	movs	r2, #255	; 0xff
 8000404:	401a      	ands	r2, r3
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	0018      	movs	r0, r3
 800040c:	2303      	movs	r3, #3
 800040e:	4003      	ands	r3, r0
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000414:	4809      	ldr	r0, [pc, #36]	; (800043c <__NVIC_SetPriority+0xd8>)
 8000416:	1dfb      	adds	r3, r7, #7
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	001c      	movs	r4, r3
 800041c:	230f      	movs	r3, #15
 800041e:	4023      	ands	r3, r4
 8000420:	3b08      	subs	r3, #8
 8000422:	089b      	lsrs	r3, r3, #2
 8000424:	430a      	orrs	r2, r1
 8000426:	3306      	adds	r3, #6
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	18c3      	adds	r3, r0, r3
 800042c:	3304      	adds	r3, #4
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b003      	add	sp, #12
 8000436:	bd90      	pop	{r4, r7, pc}
 8000438:	e000e100 	.word	0xe000e100
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <BSP_init>:
 *  Created on: 22 Ara 2020
 *      Author: Mehmet Akif/171024027
 */
#include "bsp.h"

void BSP_init(){
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
	__disable_irq();
	init_I2C();
 8000446:	f7ff feeb 	bl	8000220 <init_I2C>
	//SystemCoreClockUpdate();	//contains the system frequency
	init_timer1();
 800044a:	f000 f805 	bl	8000458 <init_timer1>
  __ASM volatile ("cpsie i" : : : "memory");
 800044e:	b662      	cpsie	i

	__enable_irq();
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <init_timer1>:

void init_timer1(){
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

	RCC->APBENR2 |= (1U<< 11);// enable time1 module clock
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <init_timer1+0x64>)
 800045e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000460:	4b16      	ldr	r3, [pc, #88]	; (80004bc <init_timer1+0x64>)
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	0109      	lsls	r1, r1, #4
 8000466:	430a      	orrs	r2, r1
 8000468:	641a      	str	r2, [r3, #64]	; 0x40

	TIM1->CR1=0;// zero out the control register just in case
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <init_timer1+0x68>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
	TIM1->CR1 |= (1<<7);	// ARPE
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <init_timer1+0x68>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <init_timer1+0x68>)
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	430a      	orrs	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
	TIM1->CNT=0;// zero out counter
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <init_timer1+0x68>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	; 0x24

	/*0.1 ms interrupt	 */

	TIM1->PSC=99;
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <init_timer1+0x68>)
 8000484:	2263      	movs	r2, #99	; 0x63
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR=16;
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <init_timer1+0x68>)
 800048a:	2210      	movs	r2, #16
 800048c:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= (1 << 0);// update interrupt enable
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <init_timer1+0x68>)
 8000490:	68da      	ldr	r2, [r3, #12]
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <init_timer1+0x68>)
 8000494:	2101      	movs	r1, #1
 8000496:	430a      	orrs	r2, r1
 8000498:	60da      	str	r2, [r3, #12]
	TIM1->CR1 |= (1 << 0);// 	tım1 enable
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <init_timer1+0x68>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <init_timer1+0x68>)
 80004a0:	2101      	movs	r1, #1
 80004a2:	430a      	orrs	r2, r1
 80004a4:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn,3);
 80004a6:	2103      	movs	r1, #3
 80004a8:	200d      	movs	r0, #13
 80004aa:	f7ff ff5b 	bl	8000364 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80004ae:	200d      	movs	r0, #13
 80004b0:	f7ff ff3e 	bl	8000330 <__NVIC_EnableIRQ>

}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40012c00 	.word	0x40012c00

080004c4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	TIM1->SR &= ~(1U<<0); //clear update status register
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>)
 80004ca:	691a      	ldr	r2, [r3, #16]
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>)
 80004ce:	2101      	movs	r1, #1
 80004d0:	438a      	bics	r2, r1
 80004d2:	611a      	str	r2, [r3, #16]

}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40012c00 	.word	0x40012c00

080004e0 <main>:



void delay(volatile uint32_t);

int main(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

	BSP_init();
 80004e4:	f7ff ffac 	bl	8000440 <BSP_init>

    return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	0018      	movs	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004f4:	f000 f826 	bl	8000544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	; (8000530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	; (800053c <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051e:	f000 f81d 	bl	800055c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000522:	f7ff ffdd 	bl	80004e0 <main>

08000526 <LoopForever>:

LoopForever:
    b LoopForever
 8000526:	e7fe      	b.n	8000526 <LoopForever>
  ldr   r0, =_estack
 8000528:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000534:	080005c4 	.word	0x080005c4
  ldr r2, =_sbss
 8000538:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800053c:	2000001c 	.word	0x2000001c

08000540 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC_COMP_IRQHandler>
	...

08000544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <SystemInit+0x14>)
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	0512      	lsls	r2, r2, #20
 800054e:	609a      	str	r2, [r3, #8]
#endif
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <__libc_init_array>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2600      	movs	r6, #0
 8000560:	4d0c      	ldr	r5, [pc, #48]	; (8000594 <__libc_init_array+0x38>)
 8000562:	4c0d      	ldr	r4, [pc, #52]	; (8000598 <__libc_init_array+0x3c>)
 8000564:	1b64      	subs	r4, r4, r5
 8000566:	10a4      	asrs	r4, r4, #2
 8000568:	42a6      	cmp	r6, r4
 800056a:	d109      	bne.n	8000580 <__libc_init_array+0x24>
 800056c:	2600      	movs	r6, #0
 800056e:	f000 f819 	bl	80005a4 <_init>
 8000572:	4d0a      	ldr	r5, [pc, #40]	; (800059c <__libc_init_array+0x40>)
 8000574:	4c0a      	ldr	r4, [pc, #40]	; (80005a0 <__libc_init_array+0x44>)
 8000576:	1b64      	subs	r4, r4, r5
 8000578:	10a4      	asrs	r4, r4, #2
 800057a:	42a6      	cmp	r6, r4
 800057c:	d105      	bne.n	800058a <__libc_init_array+0x2e>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	00b3      	lsls	r3, r6, #2
 8000582:	58eb      	ldr	r3, [r5, r3]
 8000584:	4798      	blx	r3
 8000586:	3601      	adds	r6, #1
 8000588:	e7ee      	b.n	8000568 <__libc_init_array+0xc>
 800058a:	00b3      	lsls	r3, r6, #2
 800058c:	58eb      	ldr	r3, [r5, r3]
 800058e:	4798      	blx	r3
 8000590:	3601      	adds	r6, #1
 8000592:	e7f2      	b.n	800057a <__libc_init_array+0x1e>
 8000594:	080005bc 	.word	0x080005bc
 8000598:	080005bc 	.word	0x080005bc
 800059c:	080005bc 	.word	0x080005bc
 80005a0:	080005c0 	.word	0x080005c0

080005a4 <_init>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr

080005b0 <_fini>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr
